syntax = "proto3";

package interactionpb;

// service Interactionv2 { // 客户端调用接口
//     rpc InteractionBeginNotify (InteractionBeginNotifyRequest) returns (InteractionBeginNotifyResponse) {}; // 教室端开始互动通知,服务端可以做一些准备处理,以及课程状态的变更(例如:开始一个板下活动,设置为主教课操作时间)
//     rpc InteractionEndNotify (InteractionEndNotifyRequest) returns (InteractionEndNotifyResponse) {}; // 教室端结束互动通知,数据清理,状态变更
   
//     rpc StartInteraction (StartInteractionRequest) returns (StartInteractionResponse) {}; // 教室端正式开始互动,多轮次的互动会多词调用
//     rpc StopInteraction (StopInteractionRequest) returns (StopInteractionResponse) {}; // 暂时没用
//     rpc ReportVoice (ReportVoiceRequest) returns (ReportGestureResponse) {};    // 手表端上传语音数据
//     rpc ReportGesture (ReportGestureRequest) returns (ReportGestureResponse) {};    // 手表端上传体感数据,传匹配好后的值
//     rpc ReportGestureWithMetadata (ReportGestureWithMetadataRequest) returns (ReportGestureWithMetadataResponse) {};  // 手表端传体感数据,传原始采集数据
// }

// 互动类型
enum InteractionType {
    UnknowmInteractionType  = 0;
    MotionSensing           = 1; // 体感
    Voice                   = 2; // 语音
}

// 学生端操作类型
enum StudentOptType {
    UnknownStudentOptType   = 0;     // 未知类型
    ClapHands               = 1;     // 拍手👏
    PatLeg                  = 2;     // 拍腿
}

message CommonResponse {
    uint32  errcode = 1;
    string  message = 2;
}

// 开始一个互动
message StartInteractionNtf {
    int64           lesson_id       = 1; // 课堂ID
    int64           interaction_id  = 2; // 互动ID
    int32           task_id         = 3; // 子序号
    InteractionType type            = 4; // 1体感, 2语音
    int64           duration        = 5; // 互动总持续时间
    int64           interval        = 6; // 手表采集数据时间
    string          text            = 7; // 语音文本
    int32           textType        = 8; // 文本类型 1: 单词, 2: 句子
    int32           method          = 9; // 采集方法: 1:持续上传, 2:上送最佳分数
}

// 主教端发起一个互动  主教端手动发起互动后,把互动配置通过这条消息推送给教室端,教室端拿到配置后,按常规互动流程走,
//  ManualStartInteractionNtf.interaction 为互动模板的json字符串,解析成json后与课件配置表里的Template结构一致
message ManualStartInteractionNtf {
    string  interaction = 1;
}

// 教室端根据视频播放时间自动发起的互动
message AutoStartInteractionNtf {
    string  interaction = 1;
    bool    isMonopoly  = 2; // 是否为大富翁
}

// 教室端根据视频播放时间自动结束互动
message AutoFinishInteractionNtf {
    int64   interaction_id  = 1;
    bool    isMonopoly      = 2; // 是否为大富翁
}

// InteractionNextStepNtf 互动切换到下一步
message InteractionNextStepNtf {
    int64   interaction_id   = 1;
}

// ChangeARSceneNtf AR切换场景
message ChangeARSceneNtf{
    int64   interaction_id  = 1;
    int32   task_id         = 2;
}


// 停止一个互动
message StopInteractionNtf {
    int64   interaction_id   = 1;
}

// 截屏通知
message StartScreenshotNtf {
    string fileName = 1;
}

// 录屏通知
message StartScreenRecordNtf {
    int64   time        = 1; // 录屏时间
    string  fileName    = 2; // 文件名称
}

// 学生端操作通知
message StudentOperationNtf {
    int64       interaction_id  = 1; // 互动ID
    int64       student_id      = 2; // 学生ID 
    string      name            = 3; // 学生名称
    string      avatar_url      = 4; // 头像
    int64       type            = 5; // 互动类型       
    int64       value           = 6; // 互动数值
    int64       star            = 8; // 该次互动星星数
    int32       task_id         = 9; // 任务ID
    string      text            = 10; // 本次读音对应的文本
    int32       textIndex       = 11; // 读多个单词时的索引
}

// 主教端奖励学生星星通知
message RewardStudentNtf {
    int64       studentID   = 1; // 学生ID 
    string      name        = 2; // 学生名称
    string      avatarURL   = 3; // 头像
    int64       star        = 4; // 奖励星星数
    int32       showType    = 5; // 效果类型
}


// 手表上送语音数据
// Flow watch -> server
message WatchReportVoiceRequest {
    int64   lessonID        = 1;
    int64   classID         = 2;
    int64   interactionID   = 3;
    int32   taskID          = 4;
    int64   studentID       = 5;
    string  text            = 6;
    int64   value           = 7;
}

// 手表上送语音数据响应
// Flow watch <- server
message WatchReportVoiceResponse {
    CommonResponse respone  = 1;
}

// 手表上送手势数据
// Flow watch -> server
message WatchReportGestureRequest {
    int64   lessonID        = 1;
    int64   classID         = 2;
    int64   interactionID   = 3;
    int32   taskID          = 4;
    int64   studentID       = 5;
    int64   value           = 6;
}

// 手表上送手势数据响应
// Flow watch <- server
message WatchReportGestureResponse {
    CommonResponse respone  = 1;
}

// 手表上送手势数据(上送原始数据)
// Flow watch -> server
message WatchReportGestureWithMetadataRequest {
    int64           lessonID        = 1;
    int64           classID         = 2;
    int64           interactionID   = 3;
    int32           taskID          = 4;
    int64           studentID       = 5;
    repeated double timeSeries      = 6;
    repeated double timeLine        = 7;
}

// 手表上送手势数据响应
// Flow watch <- server
message WatchReportGestureWithMetadataResponse {
    CommonResponse respone  = 1;
}

// 教室端互动开始通知
// Flow classkit -> server
message InteractionBeginNotify {
    int64   lessonID        = 1;
    int64   classID         = 2;
    int64   interactionID   = 3;
    string  config          = 4;
}

message InteractionBeginNotifyResponse {
    CommonResponse respone  = 1;
}

// 教室端互动结束通知
// Flow classkit -> servers
message InteractionEndNotify {
    int64   lessonID        = 1;
    int64   classID         = 2;
    int64   interactionID   = 3;
}

// 教室端开始一个互动
// Flow classkit -> server
message ClasskitStartInteractionRequest {
    int64   lessonID        = 1;
    int64   classID         = 2;
    int64   interactionID   = 3;
    int32   taskID          = 4;
    string  config          = 5;
}

message InteractionEndNotifyResponse {
    CommonResponse respone  = 1;
}

// 教室端开始一个互动响应
// Flow classkit <- server
message ClasskitStartInteractionResponse {
    CommonResponse respone  = 1;
}


/*Add By Peter For New Server*/
message ReportGestureWithMetadataRequest {
    int64           lessonID        = 1;
    int64           classID         = 2;
    int64           interactionID   = 3;
    int32           taskID          = 4;
    int64           studentID       = 5;
    repeated double timeSeries      = 6;
    repeated double timeLine        = 7;
}



message ReportGestureWithMetadataResponse {
    CommonResponse respone  = 1;
}


/*Add By Peter For New Server End*/
